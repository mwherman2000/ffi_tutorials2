# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Tell mypy (a type checker) to ignore all errors from this file.
# See https://mypy.readthedocs.io/en/stable/config_file.html?highlight=ignore-errors#confval-ignore_errors
# mypy: ignore-errors

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime

# Used for default argument values
DEFAULT = object()


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_library_cbd2_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_library_cbd2_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_library_cbd2_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder():
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer after consuming")
        finally:
            self.free()


class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class RustBufferStream(object):
    """
    Helper for structured reading of bytes from a RustBuffer
    """

    def __init__(self, rbuf):
        self.rbuf = rbuf
        self.offset = 0

    def remaining(self):
        return self.rbuf.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.rbuf.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.rbuf.len:
            raise InternalError("read past end of rust buffer")
        data = self.rbuf.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def readI8(self):
        return self._unpack_from(1, ">b")

    def readU8(self):
        return self._unpack_from(1, ">B")

    def readI16(self):
        return self._unpack_from(2, ">h")

    def readU16(self):
        return self._unpack_from(2, ">H")

    def readI32(self):
        return self._unpack_from(4, ">i")

    def readU32(self):
        return self._unpack_from(4, ">I")

    def readI64(self):
        return self._unpack_from(8, ">q")

    def readU64(self):
        return self._unpack_from(8, ">Q")

    def readFloat(self):
        v = self._unpack_from(4, ">f")
        return v

    def readDouble(self):
        return self._unpack_from(8, ">d")


class RustBufferBuilder(object):
    """
    Helper for structured writing of bytes into a RustBuffer.
    """

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def writeI8(self, v):
        self._pack_into(1, ">b", v)

    def writeU8(self, v):
        self._pack_into(1, ">B", v)

    def writeI16(self, v):
        self._pack_into(2, ">h", v)

    def writeU16(self, v):
        self._pack_into(2, ">H", v)

    def writeI32(self, v):
        self._pack_into(4, ">i", v)

    def writeU32(self, v):
        self._pack_into(4, ">I", v)

    def writeI64(self, v):
        self._pack_into(8, ">q", v)

    def writeU64(self, v):
        self._pack_into(8, ">Q", v)

    def writeFloat(self, v):
        self._pack_into(4, ">f", v)

    def writeDouble(self, v):
        self._pack_into(8, ">d", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_PANIC)"
        else:
            return "RustCallStatus(<invalid code>)"

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the FfiConverter for the error class that corresponds to the result.
    call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        return result
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = FfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: RustBuffer, buf_ptr: *mut RustBuffer) -> int`
FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, RustBuffer, ctypes.POINTER(RustBuffer))
# Types conforming to `FfiConverterPrimitive` pass themselves directly over the FFI.
class FfiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

# Helper class for wrapper types that will always go through a RustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class FfiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consumeWithStream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with RustBuffer.allocWithBuilder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# This is how we find and load the dynamic library provided by the component.
# For now we just look it up by name.
#
# XXX TODO: This will probably grow some magic for resolving megazording in future.
# E.g. we might start by looking for the named component in `libuniffi.so` and if
# that fails, fall back to loading it separately from `lib${componentName}.so`.

from pathlib import Path

def loadIndirect():
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    lib = libname.format("uniffi_library")
    path = str(Path(__file__).parent / lib)
    return ctypes.cdll.LoadLibrary(path)

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.library_cbd2_bool_inc_test.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_bool_inc_test.restype = ctypes.c_int8
_UniFFILib.library_cbd2_i8_inc_test.argtypes = (
    ctypes.c_int8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_i8_inc_test.restype = ctypes.c_int8
_UniFFILib.library_cbd2_i16_inc_test.argtypes = (
    ctypes.c_int16,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_i16_inc_test.restype = ctypes.c_int16
_UniFFILib.library_cbd2_i32_inc_test.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_i32_inc_test.restype = ctypes.c_int32
_UniFFILib.library_cbd2_i64_inc_test.argtypes = (
    ctypes.c_int64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_i64_inc_test.restype = ctypes.c_int64
_UniFFILib.library_cbd2_u8_inc_test.argtypes = (
    ctypes.c_uint8,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_u8_inc_test.restype = ctypes.c_uint8
_UniFFILib.library_cbd2_u16_inc_test.argtypes = (
    ctypes.c_uint16,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_u16_inc_test.restype = ctypes.c_uint16
_UniFFILib.library_cbd2_u32_inc_test.argtypes = (
    ctypes.c_uint32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_u32_inc_test.restype = ctypes.c_uint32
_UniFFILib.library_cbd2_u64_inc_test.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_u64_inc_test.restype = ctypes.c_uint64
_UniFFILib.library_cbd2_float_inc_test.argtypes = (
    ctypes.c_float,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_float_inc_test.restype = ctypes.c_float
_UniFFILib.library_cbd2_double_inc_test.argtypes = (
    ctypes.c_double,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_double_inc_test.restype = ctypes.c_double
_UniFFILib.library_cbd2_string_inc_test.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_string_inc_test.restype = RustBuffer
_UniFFILib.library_cbd2_byref_inc_test.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_byref_inc_test.restype = RustBuffer
_UniFFILib.library_cbd2_optional_type_inc_test.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_optional_type_inc_test.restype = RustBuffer
_UniFFILib.library_cbd2_vector_inc_test.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_vector_inc_test.restype = RustBuffer
_UniFFILib.library_cbd2_hash_map_inc_test.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_hash_map_inc_test.restype = RustBuffer
_UniFFILib.library_cbd2_void_inc_test.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_void_inc_test.restype = None
_UniFFILib.library_cbd2_error_inc_test.argtypes = (
    ctypes.c_uint64,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.library_cbd2_error_inc_test.restype = ctypes.c_uint64
_UniFFILib.ffi_library_cbd2_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_library_cbd2_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_library_cbd2_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_library_cbd2_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_library_cbd2_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_library_cbd2_rustbuffer_free.restype = None
_UniFFILib.ffi_library_cbd2_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_library_cbd2_rustbuffer_reserve.restype = RustBuffer

# Public interface members begin here.


class FfiConverterUInt8(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU8()

    @staticmethod
    def write(value, buf):
        buf.writeU8(value)

class FfiConverterInt8(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readI8()

    @staticmethod
    def write(value, buf):
        buf.writeI8(value)

class FfiConverterUInt16(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU16()

    @staticmethod
    def write(value, buf):
        buf.writeU16(value)

class FfiConverterInt16(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readI16()

    @staticmethod
    def write(value, buf):
        buf.writeI16(value)

class FfiConverterUInt32(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU32()

    @staticmethod
    def write(value, buf):
        buf.writeU32(value)

class FfiConverterInt32(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readI32()

    @staticmethod
    def write(value, buf):
        buf.writeI32(value)

class FfiConverterUInt64(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readU64()

    @staticmethod
    def write(value, buf):
        buf.writeU64(value)

class FfiConverterInt64(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readI64()

    @staticmethod
    def write(value, buf):
        buf.writeI64(value)

class FfiConverterFloat(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readFloat()

    @staticmethod
    def write(value, buf):
        buf.writeFloat(value)

class FfiConverterDouble(FfiConverterPrimitive):
    @staticmethod
    def read(buf):
        return buf.readDouble()

    @staticmethod
    def write(value, buf):
        buf.writeDouble(value)

class FfiConverterBool:
    @classmethod
    def read(cls, buf):
        return cls.lift(buf.readU8())

    @classmethod
    def write(cls, value, buf):
        buf.writeU8(cls.lower(value))

    @staticmethod
    def lift(value):
        return int(value) != 0

    @staticmethod
    def lower(value):
        return 1 if value else 0

class FfiConverterString:
    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = buf.read(size)
        return utf8Bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8Bytes = value.encode("utf-8")
        buf.writeI32(len(utf8Bytes))
        buf.write(utf8Bytes)

    @staticmethod
    def lift(buf):
        with buf.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()


class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return "Point(x={}, y={})".format(self.x, self.y)

    def __eq__(self, other):
        if self.x != other.x:
            return False
        if self.y != other.y:
            return False
        return True

class FfiConverterTypePoint(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Point(
            x=FfiConverterDouble.read(buf),
            y=FfiConverterDouble.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterDouble.write(value.x, buf)
        FfiConverterDouble.write(value.y, buf)



# ArithmeticError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separated, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class UniFFIExceptionTmpNamespace:
    class ArithmeticError(Exception):
        pass
    
    class IntegerOverflow(ArithmeticError):
        def __str__(self):
            return "ArithmeticError.IntegerOverflow({})".format(repr(super().__str__()))

    ArithmeticError.IntegerOverflow = IntegerOverflow
ArithmeticError = UniFFIExceptionTmpNamespace.ArithmeticError
del UniFFIExceptionTmpNamespace


class FfiConverterTypeArithmeticError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return ArithmeticError.IntegerOverflow(
                FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, ArithmeticError.IntegerOverflow):
            buf.writeI32(1)



class FfiConverterOptionalInt32(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterInt32.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterSequenceString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterString.read(buf) for i in range(count)
        ]



class FfiConverterMapStringInt32(FfiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.writeI32(len(items))
        for (key, value) in items.items():
            FfiConverterString.write(key, buf)
            FfiConverterInt32.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = FfiConverterString.read(buf)
            val = FfiConverterInt32.read(buf)
            d[key] = val
        return d

def bool_inc_test(value):
    value = bool(value)
    
    return FfiConverterBool.lift(rust_call(_UniFFILib.library_cbd2_bool_inc_test,
        FfiConverterBool.lower(value)))



def i8_inc_test(value):
    value = int(value)
    
    return FfiConverterInt8.lift(rust_call(_UniFFILib.library_cbd2_i8_inc_test,
        FfiConverterInt8.lower(value)))



def i16_inc_test(value):
    value = int(value)
    
    return FfiConverterInt16.lift(rust_call(_UniFFILib.library_cbd2_i16_inc_test,
        FfiConverterInt16.lower(value)))



def i32_inc_test(value):
    value = int(value)
    
    return FfiConverterInt32.lift(rust_call(_UniFFILib.library_cbd2_i32_inc_test,
        FfiConverterInt32.lower(value)))



def i64_inc_test(value):
    value = int(value)
    
    return FfiConverterInt64.lift(rust_call(_UniFFILib.library_cbd2_i64_inc_test,
        FfiConverterInt64.lower(value)))



def u8_inc_test(value):
    value = int(value)
    
    return FfiConverterUInt8.lift(rust_call(_UniFFILib.library_cbd2_u8_inc_test,
        FfiConverterUInt8.lower(value)))



def u16_inc_test(value):
    value = int(value)
    
    return FfiConverterUInt16.lift(rust_call(_UniFFILib.library_cbd2_u16_inc_test,
        FfiConverterUInt16.lower(value)))



def u32_inc_test(value):
    value = int(value)
    
    return FfiConverterUInt32.lift(rust_call(_UniFFILib.library_cbd2_u32_inc_test,
        FfiConverterUInt32.lower(value)))



def u64_inc_test(value):
    value = int(value)
    
    return FfiConverterUInt64.lift(rust_call(_UniFFILib.library_cbd2_u64_inc_test,
        FfiConverterUInt64.lower(value)))



def float_inc_test(value):
    value = float(value)
    
    return FfiConverterFloat.lift(rust_call(_UniFFILib.library_cbd2_float_inc_test,
        FfiConverterFloat.lower(value)))



def double_inc_test(value):
    value = float(value)
    
    return FfiConverterDouble.lift(rust_call(_UniFFILib.library_cbd2_double_inc_test,
        FfiConverterDouble.lower(value)))



def string_inc_test(value):
    value = value
    
    return FfiConverterString.lift(rust_call(_UniFFILib.library_cbd2_string_inc_test,
        FfiConverterString.lower(value)))



def byref_inc_test(value):
    value = value
    
    return FfiConverterTypePoint.lift(rust_call(_UniFFILib.library_cbd2_byref_inc_test,
        FfiConverterTypePoint.lower(value)))



def optional_type_inc_test(value):
    value = (None if value is None else int(value))
    
    return FfiConverterOptionalInt32.lift(rust_call(_UniFFILib.library_cbd2_optional_type_inc_test,
        FfiConverterOptionalInt32.lower(value)))



def vector_inc_test(value):
    value = list(x for x in value)
    
    return FfiConverterSequenceString.lift(rust_call(_UniFFILib.library_cbd2_vector_inc_test,
        FfiConverterSequenceString.lower(value)))



def hash_map_inc_test(value):
    value = dict((k, int(v)) for (k, v) in value.items())
    
    return FfiConverterMapStringInt32.lift(rust_call(_UniFFILib.library_cbd2_hash_map_inc_test,
        FfiConverterMapStringInt32.lower(value)))



def void_inc_test(value):
    value = int(value)
    
    rust_call(_UniFFILib.library_cbd2_void_inc_test,
        FfiConverterInt32.lower(value))


def error_inc_test(a,b):
    a = int(a)
    
    b = int(b)
    
    return FfiConverterUInt64.lift(rust_call_with_error(FfiConverterTypeArithmeticError,_UniFFILib.library_cbd2_error_inc_test,
        FfiConverterUInt64.lower(a),
        FfiConverterUInt64.lower(b)))



__all__ = [
    "InternalError",
    "Point",
    "bool_inc_test",
    "i8_inc_test",
    "i16_inc_test",
    "i32_inc_test",
    "i64_inc_test",
    "u8_inc_test",
    "u16_inc_test",
    "u32_inc_test",
    "u64_inc_test",
    "float_inc_test",
    "double_inc_test",
    "string_inc_test",
    "byref_inc_test",
    "optional_type_inc_test",
    "vector_inc_test",
    "hash_map_inc_test",
    "void_inc_test",
    "error_inc_test",
    "ArithmeticError",
]

